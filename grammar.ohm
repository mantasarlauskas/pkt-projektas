Projektas {
    Lines = Line+

    Line = VariableInitialization | VariableUpdate | Print | ConditionDeclaration | LoopDeclaration | FunctionDeclaration | FunctionCall

    Slice = Name "[" digit+ ":" digit+ "]"

    VariableInitialization = DataTypes Name "=" Expression 

    VariableUpdate = Name "=" Expression

    Expression  = Expression "+" Expression -- plus
                | Expression "-" Expression -- minus
                | Expression "*" Expression -- mul
                | Expression "/" Expression -- div
                | Slice
                | Name
                | Term

    ConditionDeclaration = "jei" "(" ConditionArguments ")" Line ":" Line

    LoopDeclaration = "kol" "(" ConditionArguments ")" Block

    ConditionArguments  = Expression "==" Expression -- equal
                        | Expression "!=" Expression  -- notEqual
                        | Expression ">" Expression  -- greater
                        | Expression "<" Expression  -- less
                        | Expression ">=" Expression  -- notLess
                        | Expression "<=" Expression  -- notGreater

    FunctionDeclaration = "funkcija" Name "(" FunctionArguments ")" Block

    FunctionCall = Name "(" FunctionArguments ")"

    FunctionArguments = ListOf<Name, ","> | ListOf<Name, ",">

    Block = "{" Line* "}"
    
    Print   = "spausdinti" "(" Term ")"
            | "spausdinti" "(" Name ")"
    
    DataTypes = "Skaicius" | "Tekstas"

    Name = letter (letter|digit)*

    Term = digit+ | String

    String = Quotes (~Quotes any)+ Quotes

    Quotes = "\'" | "\""

    space := "\t" | " " | "\n" | comment | "\r\n"
    comment = "//" (~"\n" any)*
}